name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  claude-review:
    name: AI Code Review
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR diff and save to file
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff origin/${{ github.base_ref }}...HEAD > /tmp/pr-diff.txt

      - name: Review with Claude API
        uses: actions/github-script@v7
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        with:
          script: |
            const pullNumber = context.payload.pull_request?.number;
            if (!pullNumber) {
              console.log('No pull request found in context');
              return;
            }

            // Read diff from file
            const fs = require('fs');
            const diff = fs.readFileSync('/tmp/pr-diff.txt', 'utf8');

            // Call Claude API for code review
            const response = await fetch('https://api.anthropic.com/v1/messages', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'x-api-key': process.env.ANTHROPIC_API_KEY,
                'anthropic-version': '2023-06-01'
              },
              body: JSON.stringify({
                model: 'claude-sonnet-4-20250514',
                max_tokens: 4096,
                messages: [{
                  role: 'user',
                  content: `Please review this code diff and provide feedback on:
                  1. Code quality and best practices
                  2. Potential bugs or issues
                  3. Performance concerns
                  4. Security vulnerabilities
                  5. Suggestions for improvement

                  Focus on the tower defense game context (React + Phaser 3 + TypeScript).

                  Diff:
                  \`\`\`diff
                  ${diff}
                  \`\`\`

                  Format your response in markdown with clear sections.`
                }]
              })
            });

            const data = await response.json();

            // Check for API errors
            if (!response.ok || !data.content || !data.content[0]) {
              const errorMessage = data.error?.message || 'Unknown API error';
              core.setFailed('Claude API request failed: ' + errorMessage);

              const errorBody = '## ⚠️ Claude AI Code Review Failed\n\n' +
                '**Error**: ' + errorMessage + '\n\n' +
                '**Possible causes:**\n' +
                '- ANTHROPIC_API_KEY not configured or invalid\n' +
                '- API rate limit exceeded\n' +
                '- API service unavailable\n\n' +
                'Please check the [workflow logs](' + context.payload.repository.html_url + '/actions/runs/' + context.runId + ') for details.';

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pullNumber,
                body: errorBody
              });
              return;
            }

            const review = data.content[0].text;

            // Post review as comment
            const reviewBody = '## 🤖 Claude AI Code Review\n\n' + review + '\n\n---\n*This review was automatically generated by Claude API*';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullNumber,
              body: reviewBody
            });

            // Analyze review for critical issues and create auto-fix issues
            const criticalKeywords = [
              'critical', 'security vulnerability', 'memory leak',
              'type error', 'undefined', 'null reference',
              'performance issue', 'blocking', 'must fix'
            ];

            const hasCriticalIssues = criticalKeywords.some(keyword =>
              review.toLowerCase().includes(keyword)
            );

            if (hasCriticalIssues) {
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pullNumber
              });

              // Create an issue for auto-fix
              const issueTitle = '[AUTO-FIX] Code review found critical issues in PR #' + pullNumber;
              const issueBody = '## 🤖 Automated Issue Creation\n\n' +
                '**Source**: Code Review on PR #' + pullNumber + '\n' +
                '**Branch**: ' + pr.data.head.ref + '\n' +
                '**Author**: @' + pr.data.user.login + '\n\n' +
                '### Code Review Findings\n\n' +
                review + '\n\n' +
                '### Context\n\n' +
                '- **PR**: #' + pullNumber + ' - ' + pr.data.title + '\n' +
                '- **Files Changed**: ' + pr.data.changed_files + '\n' +
                '- **Commits**: ' + pr.data.commits + '\n' +
                '- **Review Date**: ' + new Date().toISOString() + '\n\n' +
                '### Next Steps\n\n' +
                'This issue has been automatically labeled with `auto-fix`. An AI agent will:\n' +
                '1. Analyze the problems identified\n' +
                '2. Generate fixes\n' +
                '3. Create a new commit or PR with the fixes\n' +
                '4. Link back to this issue\n\n' +
                '### Manual Override\n\n' +
                'If you prefer to fix this manually, remove the `auto-fix` label.\n\n' +
                '---\n\n' +
                '*Automatically created by Claude Code Review*';

              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['auto-fix', 'code-review', 'needs-attention'],
                assignees: [pr.data.user.login]
              });

              // Comment on PR with issue link
              const commentBody = '🚨 **Critical issues detected!** An auto-fix issue has been created: #' + issue.data.number + '\n\nAn AI agent will attempt to fix these issues automatically.';
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pullNumber,
                body: commentBody
              });

              console.log('Created auto-fix issue #' + issue.data.number);
            }

      - name: Create issue on review failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const workflow = context.workflow;
            const runId = context.runId;
            const prNumber = context.payload.pull_request?.number;
            const branch = context.ref.replace('refs/heads/', '').replace('refs/pull/', 'PR #').replace('/merge', '');
            const sha = context.sha.substring(0, 7);

            const title = '🔴 Claude Code Review Failed' + (prNumber ? ' - PR #' + prNumber : ' - ' + branch);
            const body = '## Claude Code Review 失败\n\n' +
              '**分支:** ' + branch + '\n' +
              '**提交:** ' + sha + '\n' +
              '**Workflow:** ' + workflow + '\n\n' +
              '### 🔍 查看详情\n\n' +
              '**Workflow运行日志:** https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + runId + '\n\n' +
              '### 🛠️ 可能的原因\n\n' +
              '- **缺少 ANTHROPIC_API_KEY**: Secret未配置或已过期\n' +
              '- **API调用失败**: API额度不足或服务不可用\n' +
              '- **权限问题**: Workflow权限配置不正确\n\n' +
              '### ✅ 修复步骤\n\n' +
              '1. **检查API Key配置**:\n' +
              '   - 前往 Settings → Secrets and variables → Actions\n' +
              '   - 确认 `ANTHROPIC_API_KEY` 已配置且有效\n\n' +
              '2. **验证API Key**:\n' +
              '   - 在本地测试API Key是否可用\n' +
              '   - 检查API额度是否充足\n\n' +
              '3. **查看详细日志**:\n' +
              '   - 点击上面的workflow日志链接\n' +
              '   - 查看具体的错误信息\n\n' +
              '### 💡 临时解决方案\n\n' +
              '如果不需要自动Code Review，可以:\n' +
              '- 删除或禁用 `.github/workflows/claude-review.yml`\n' +
              '- 或移除 `ANTHROPIC_API_KEY` 触发条件检查\n\n' +
              '---\n\n' +
              '*由 Claude Code Review workflow 自动生成*';

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'ci', 'code-review', 'auto-generated']
            });
