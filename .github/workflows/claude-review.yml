name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  claude-review:
    name: AI Code Review
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR diff and save to file
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff origin/${{ github.base_ref }}...HEAD > /tmp/pr-diff.txt

      - name: Review with Claude API
        uses: actions/github-script@v7
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        with:
          script: |
            const pullNumber = context.payload.pull_request?.number;
            if (!pullNumber) {
              console.log('No pull request found in context');
              return;
            }

            // Read diff from file
            const fs = require('fs');
            const diff = fs.readFileSync('/tmp/pr-diff.txt', 'utf8');

            // Call Claude API for code review
            const response = await fetch('https://api.anthropic.com/v1/messages', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'x-api-key': process.env.ANTHROPIC_API_KEY,
                'anthropic-version': '2023-06-01'
              },
              body: JSON.stringify({
                model: 'claude-sonnet-4-20250514',
                max_tokens: 4096,
                messages: [{
                  role: 'user',
                  content: `Please review this code diff and provide feedback on:
                  1. Code quality and best practices
                  2. Potential bugs or issues
                  3. Performance concerns
                  4. Security vulnerabilities
                  5. Suggestions for improvement

                  Focus on the tower defense game context (React + Phaser 3 + TypeScript).

                  Diff:
                  \`\`\`diff
                  ${diff}
                  \`\`\`

                  Format your response in markdown with clear sections.`
                }]
              })
            });

            const data = await response.json();

            // Check for API errors
            if (!response.ok || !data.content || !data.content[0]) {
              const errorMessage = data.error?.message || 'Unknown API error';
              core.setFailed(`Claude API request failed: ${errorMessage}`);

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pullNumber,
                body: `## ⚠️ Claude AI Code Review Failed\n\n**Error**: ${errorMessage}\n\n**Possible causes:**\n- ANTHROPIC_API_KEY not configured or invalid\n- API rate limit exceeded\n- API service unavailable\n\nPlease check the [workflow logs](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.`
              });
              return;
            }

            const review = data.content[0].text;

            // Post review as comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullNumber,
              body: `## 🤖 Claude AI Code Review\n\n${review}\n\n---\n*This review was automatically generated by Claude API*`
            });

            // Analyze review for critical issues and create auto-fix issues
            const criticalKeywords = [
              'critical', 'security vulnerability', 'memory leak',
              'type error', 'undefined', 'null reference',
              'performance issue', 'blocking', 'must fix'
            ];

            const hasCriticalIssues = criticalKeywords.some(keyword =>
              review.toLowerCase().includes(keyword)
            );

            if (hasCriticalIssues) {
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pullNumber
              });

              // Create an issue for auto-fix
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[AUTO-FIX] Code review found critical issues in PR #${pullNumber}`,
                body: `## 🤖 Automated Issue Creation

**Source**: Code Review on PR #${pullNumber}
**Branch**: \`${pr.data.head.ref}\`
**Author**: @${pr.data.user.login}

### Code Review Findings

${review}

### Context

- **PR**: #${pullNumber} - ${pr.data.title}
- **Files Changed**: ${pr.data.changed_files}
- **Commits**: ${pr.data.commits}
- **Review Date**: ${new Date().toISOString()}

### Next Steps

This issue has been automatically labeled with \`auto-fix\`. An AI agent will:
1. Analyze the problems identified
2. Generate fixes
3. Create a new commit or PR with the fixes
4. Link back to this issue

### Manual Override

If you prefer to fix this manually, remove the \`auto-fix\` label.

---
*Automatically created by [Claude Code Review](${context.payload.repository.html_url}/actions/runs/${context.runId})*`,
                labels: ['auto-fix', 'code-review', 'needs-attention'],
                assignees: [pr.data.user.login]
              });

              // Comment on PR with issue link
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pullNumber,
                body: `🚨 **Critical issues detected!** An auto-fix issue has been created: #${issue.data.number}\n\nAn AI agent will attempt to fix these issues automatically.`
              });

              console.log(`Created auto-fix issue #${issue.data.number}`);
            }
